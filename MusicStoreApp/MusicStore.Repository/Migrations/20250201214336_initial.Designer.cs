// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MusicStoreApplication.Repository;

#nullable disable

namespace MusicStore.Repository.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250201214336_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MusicStore.Domain.Domain.Album", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AlbumImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ArtistId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ArtistId");

                    b.ToTable("Albums");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7720b25f-098b-4f2b-9d51-3efc438afaa9"),
                            ArtistId = new Guid("2c2934a5-114c-4293-b00b-9742d6c784f5"),
                            Price = 0,
                            ReleaseDate = new DateTime(1973, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "The Dark Side of the Moon"
                        },
                        new
                        {
                            Id = new Guid("d444d49e-54f7-49e0-8e42-42aba82e5885"),
                            ArtistId = new Guid("2c2934a5-114c-4293-b00b-9742d6c784f5"),
                            Price = 0,
                            ReleaseDate = new DateTime(1975, 9, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Wish You Were Here"
                        },
                        new
                        {
                            Id = new Guid("658c1f4a-8a65-4c77-ae64-144f2800d63d"),
                            ArtistId = new Guid("ad25130f-f705-4525-83f9-52f88c94bb8a"),
                            Price = 0,
                            ReleaseDate = new DateTime(1969, 9, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Abbey Road"
                        },
                        new
                        {
                            Id = new Guid("766c6a1d-47b0-4bed-b442-4cba9b41214e"),
                            ArtistId = new Guid("ad25130f-f705-4525-83f9-52f88c94bb8a"),
                            Price = 0,
                            ReleaseDate = new DateTime(1970, 5, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Let It Be"
                        },
                        new
                        {
                            Id = new Guid("923cd445-3505-49e7-827f-3f8b00e0955a"),
                            ArtistId = new Guid("4c9ca14a-fc48-4c72-bc0e-53b1bf70b917"),
                            Price = 0,
                            ReleaseDate = new DateTime(1971, 11, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Led Zeppelin IV"
                        },
                        new
                        {
                            Id = new Guid("fe478981-ecfe-484f-9e56-1e2b5c94a4ea"),
                            ArtistId = new Guid("4c9ca14a-fc48-4c72-bc0e-53b1bf70b917"),
                            Price = 0,
                            ReleaseDate = new DateTime(1973, 3, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Houses of the Holy"
                        },
                        new
                        {
                            Id = new Guid("f662dfc9-2ac2-4ab2-ac6c-478eb6aade13"),
                            ArtistId = new Guid("b0501ae4-2e0b-4da5-b322-836c51e3361f"),
                            Price = 0,
                            ReleaseDate = new DateTime(1975, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "A Night at the Opera"
                        },
                        new
                        {
                            Id = new Guid("1c489fd7-4c49-40f6-9e6b-bce173392ef8"),
                            ArtistId = new Guid("b0501ae4-2e0b-4da5-b322-836c51e3361f"),
                            Price = 0,
                            ReleaseDate = new DateTime(1984, 2, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "The Works"
                        },
                        new
                        {
                            Id = new Guid("11736c81-a365-4180-8e69-e0f30d879292"),
                            ArtistId = new Guid("26b70215-3f31-4e29-b2bd-a9033afff2c8"),
                            Price = 0,
                            ReleaseDate = new DateTime(1991, 9, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Nevermind"
                        },
                        new
                        {
                            Id = new Guid("59a56f50-b7b5-414e-922a-c5c10d711178"),
                            ArtistId = new Guid("26b70215-3f31-4e29-b2bd-a9033afff2c8"),
                            Price = 0,
                            ReleaseDate = new DateTime(1993, 9, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "In Utero"
                        });
                });

            modelBuilder.Entity("MusicStore.Domain.Domain.Artist", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Artists");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2c2934a5-114c-4293-b00b-9742d6c784f5"),
                            Bio = "A legendary rock band.",
                            Name = "Pink Floyd"
                        },
                        new
                        {
                            Id = new Guid("ad25130f-f705-4525-83f9-52f88c94bb8a"),
                            Bio = "One of the most influential rock bands.",
                            Name = "The Beatles"
                        },
                        new
                        {
                            Id = new Guid("4c9ca14a-fc48-4c72-bc0e-53b1bf70b917"),
                            Bio = "A rock band known for its heavy sound.",
                            Name = "Led Zeppelin"
                        },
                        new
                        {
                            Id = new Guid("b0501ae4-2e0b-4da5-b322-836c51e3361f"),
                            Bio = "A rock band known for its eclectic musical style.",
                            Name = "Queen"
                        },
                        new
                        {
                            Id = new Guid("26b70215-3f31-4e29-b2bd-a9033afff2c8"),
                            Bio = "A grunge band that shaped the 90s music scene.",
                            Name = "Nirvana"
                        });
                });

            modelBuilder.Entity("MusicStore.Domain.Domain.BoughtItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("BoughtItems");
                });

            modelBuilder.Entity("MusicStore.Domain.Domain.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("OwnerId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("MusicStore.Domain.Domain.ShoppingCart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OwnerId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("ShoppingCarts");
                });

            modelBuilder.Entity("MusicStore.Domain.Domain.ShoppingCartItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MusicStoreApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ShoppingCartId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("MusicStoreApplicationUserId");

                    b.HasIndex("ShoppingCartId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("MusicStore.Domain.Domain.Track", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AlbumId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ArtistId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("TrackImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AlbumId");

                    b.HasIndex("ArtistId");

                    b.ToTable("Tracks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("59e357fd-4792-4dec-9237-fd63ef5e48c3"),
                            AlbumId = new Guid("7720b25f-098b-4f2b-9d51-3efc438afaa9"),
                            ArtistId = new Guid("2c2934a5-114c-4293-b00b-9742d6c784f5"),
                            Duration = new TimeSpan(0, 0, 1, 0, 0),
                            Price = 0,
                            Title = "Speak to Me"
                        },
                        new
                        {
                            Id = new Guid("62f54ee2-9d5d-4e8d-a56e-12aa8e4ec47e"),
                            AlbumId = new Guid("7720b25f-098b-4f2b-9d51-3efc438afaa9"),
                            ArtistId = new Guid("2c2934a5-114c-4293-b00b-9742d6c784f5"),
                            Duration = new TimeSpan(0, 0, 2, 0, 0),
                            Price = 0,
                            Title = "Breathe"
                        },
                        new
                        {
                            Id = new Guid("2bf7ca81-f83b-49a3-ae2d-5f150219ba83"),
                            AlbumId = new Guid("7720b25f-098b-4f2b-9d51-3efc438afaa9"),
                            ArtistId = new Guid("2c2934a5-114c-4293-b00b-9742d6c784f5"),
                            Duration = new TimeSpan(0, 0, 3, 0, 0),
                            Price = 0,
                            Title = "On the Run"
                        },
                        new
                        {
                            Id = new Guid("2dd140b5-bd55-42ea-9ca2-7101b27eace0"),
                            AlbumId = new Guid("7720b25f-098b-4f2b-9d51-3efc438afaa9"),
                            ArtistId = new Guid("2c2934a5-114c-4293-b00b-9742d6c784f5"),
                            Duration = new TimeSpan(0, 0, 6, 0, 0),
                            Price = 0,
                            Title = "Time"
                        },
                        new
                        {
                            Id = new Guid("2488a043-9d71-47af-8ea7-1036407a616d"),
                            AlbumId = new Guid("d444d49e-54f7-49e0-8e42-42aba82e5885"),
                            ArtistId = new Guid("2c2934a5-114c-4293-b00b-9742d6c784f5"),
                            Duration = new TimeSpan(0, 0, 13, 0, 0),
                            Price = 0,
                            Title = "Shine On You Crazy Diamond (Part I-V)"
                        },
                        new
                        {
                            Id = new Guid("d7a5e7f6-0492-44b7-92fc-8d83e37abb4d"),
                            AlbumId = new Guid("d444d49e-54f7-49e0-8e42-42aba82e5885"),
                            ArtistId = new Guid("2c2934a5-114c-4293-b00b-9742d6c784f5"),
                            Duration = new TimeSpan(0, 0, 7, 0, 0),
                            Price = 0,
                            Title = "Welcome to the Machine"
                        },
                        new
                        {
                            Id = new Guid("aca5af7d-1f5b-4bd5-bc58-509e05d1a9c6"),
                            AlbumId = new Guid("d444d49e-54f7-49e0-8e42-42aba82e5885"),
                            ArtistId = new Guid("2c2934a5-114c-4293-b00b-9742d6c784f5"),
                            Duration = new TimeSpan(0, 0, 5, 0, 0),
                            Price = 0,
                            Title = "Have a Cigar"
                        },
                        new
                        {
                            Id = new Guid("6a999db4-db0a-4bae-ba29-3278b101f5f9"),
                            AlbumId = new Guid("d444d49e-54f7-49e0-8e42-42aba82e5885"),
                            ArtistId = new Guid("2c2934a5-114c-4293-b00b-9742d6c784f5"),
                            Duration = new TimeSpan(0, 0, 5, 0, 0),
                            Price = 0,
                            Title = "Wish You Were Here"
                        },
                        new
                        {
                            Id = new Guid("362478b1-624f-469f-8643-ef88fbad15f5"),
                            AlbumId = new Guid("658c1f4a-8a65-4c77-ae64-144f2800d63d"),
                            ArtistId = new Guid("ad25130f-f705-4525-83f9-52f88c94bb8a"),
                            Duration = new TimeSpan(0, 0, 4, 0, 0),
                            Price = 0,
                            Title = "Come Together"
                        },
                        new
                        {
                            Id = new Guid("ab8da9c4-ac4a-4585-bd6f-1d8a2e78d817"),
                            AlbumId = new Guid("658c1f4a-8a65-4c77-ae64-144f2800d63d"),
                            ArtistId = new Guid("ad25130f-f705-4525-83f9-52f88c94bb8a"),
                            Duration = new TimeSpan(0, 0, 3, 0, 0),
                            Price = 0,
                            Title = "Something"
                        },
                        new
                        {
                            Id = new Guid("5fcecc16-2972-448e-ab14-fb2b593760e4"),
                            AlbumId = new Guid("658c1f4a-8a65-4c77-ae64-144f2800d63d"),
                            ArtistId = new Guid("ad25130f-f705-4525-83f9-52f88c94bb8a"),
                            Duration = new TimeSpan(0, 0, 3, 0, 0),
                            Price = 0,
                            Title = "Octopus's Garden"
                        },
                        new
                        {
                            Id = new Guid("8dcf8189-c7fb-4816-bb51-9f1439d260dd"),
                            AlbumId = new Guid("658c1f4a-8a65-4c77-ae64-144f2800d63d"),
                            ArtistId = new Guid("ad25130f-f705-4525-83f9-52f88c94bb8a"),
                            Duration = new TimeSpan(0, 0, 3, 0, 0),
                            Price = 0,
                            Title = "Here Comes the Sun"
                        },
                        new
                        {
                            Id = new Guid("e2a276df-2efa-4c60-9db7-bc029c57e701"),
                            AlbumId = new Guid("766c6a1d-47b0-4bed-b442-4cba9b41214e"),
                            ArtistId = new Guid("ad25130f-f705-4525-83f9-52f88c94bb8a"),
                            Duration = new TimeSpan(0, 0, 4, 0, 0),
                            Price = 0,
                            Title = "Let It Be"
                        },
                        new
                        {
                            Id = new Guid("1c3bdf8a-993a-49ff-a819-52748e2dce44"),
                            AlbumId = new Guid("766c6a1d-47b0-4bed-b442-4cba9b41214e"),
                            ArtistId = new Guid("ad25130f-f705-4525-83f9-52f88c94bb8a"),
                            Duration = new TimeSpan(0, 0, 3, 0, 0),
                            Price = 0,
                            Title = "Across the Universe"
                        },
                        new
                        {
                            Id = new Guid("f83d6f6f-5347-4c11-8455-a17ce3c51f6e"),
                            AlbumId = new Guid("766c6a1d-47b0-4bed-b442-4cba9b41214e"),
                            ArtistId = new Guid("ad25130f-f705-4525-83f9-52f88c94bb8a"),
                            Duration = new TimeSpan(0, 0, 3, 0, 0),
                            Price = 0,
                            Title = "The Long and Winding Road"
                        },
                        new
                        {
                            Id = new Guid("e6e6db57-b32b-47a7-ac5c-0980365c1345"),
                            AlbumId = new Guid("766c6a1d-47b0-4bed-b442-4cba9b41214e"),
                            ArtistId = new Guid("ad25130f-f705-4525-83f9-52f88c94bb8a"),
                            Duration = new TimeSpan(0, 0, 3, 0, 0),
                            Price = 0,
                            Title = "Get Back"
                        },
                        new
                        {
                            Id = new Guid("b7ce4b70-65ab-497b-b154-8c069f75aa4e"),
                            AlbumId = new Guid("923cd445-3505-49e7-827f-3f8b00e0955a"),
                            ArtistId = new Guid("4c9ca14a-fc48-4c72-bc0e-53b1bf70b917"),
                            Duration = new TimeSpan(0, 0, 4, 0, 0),
                            Price = 0,
                            Title = "Black Dog"
                        },
                        new
                        {
                            Id = new Guid("e128daa2-4487-4d1d-ac0c-b696a8e2a8d8"),
                            AlbumId = new Guid("923cd445-3505-49e7-827f-3f8b00e0955a"),
                            ArtistId = new Guid("4c9ca14a-fc48-4c72-bc0e-53b1bf70b917"),
                            Duration = new TimeSpan(0, 0, 3, 0, 0),
                            Price = 0,
                            Title = "Rock and Roll"
                        },
                        new
                        {
                            Id = new Guid("c72bf882-1f5a-4b2c-974f-5a42de06069b"),
                            AlbumId = new Guid("923cd445-3505-49e7-827f-3f8b00e0955a"),
                            ArtistId = new Guid("4c9ca14a-fc48-4c72-bc0e-53b1bf70b917"),
                            Duration = new TimeSpan(0, 0, 8, 0, 0),
                            Price = 0,
                            Title = "Stairway to Heaven"
                        },
                        new
                        {
                            Id = new Guid("4d525fe7-e9a0-4be3-b63c-e9a16d11a8af"),
                            AlbumId = new Guid("923cd445-3505-49e7-827f-3f8b00e0955a"),
                            ArtistId = new Guid("4c9ca14a-fc48-4c72-bc0e-53b1bf70b917"),
                            Duration = new TimeSpan(0, 0, 3, 0, 0),
                            Price = 0,
                            Title = "Going to California"
                        },
                        new
                        {
                            Id = new Guid("b0c5a2e1-2769-4120-83e6-6bc1aff0fc7b"),
                            AlbumId = new Guid("fe478981-ecfe-484f-9e56-1e2b5c94a4ea"),
                            ArtistId = new Guid("4c9ca14a-fc48-4c72-bc0e-53b1bf70b917"),
                            Duration = new TimeSpan(0, 0, 5, 0, 0),
                            Price = 0,
                            Title = "The Song Remains the Same"
                        },
                        new
                        {
                            Id = new Guid("90ab6cbc-3034-4cd2-8f6c-0a9bc18e952b"),
                            AlbumId = new Guid("fe478981-ecfe-484f-9e56-1e2b5c94a4ea"),
                            ArtistId = new Guid("4c9ca14a-fc48-4c72-bc0e-53b1bf70b917"),
                            Duration = new TimeSpan(0, 0, 7, 0, 0),
                            Price = 0,
                            Title = "The Rain Song"
                        },
                        new
                        {
                            Id = new Guid("f8688bc2-b394-479b-8be0-8a5dfc3ab3f2"),
                            AlbumId = new Guid("fe478981-ecfe-484f-9e56-1e2b5c94a4ea"),
                            ArtistId = new Guid("4c9ca14a-fc48-4c72-bc0e-53b1bf70b917"),
                            Duration = new TimeSpan(0, 0, 4, 0, 0),
                            Price = 0,
                            Title = "Over the Hills and Far Away"
                        },
                        new
                        {
                            Id = new Guid("8b8cb4dd-7933-4c65-90f2-05ded22c3a88"),
                            AlbumId = new Guid("fe478981-ecfe-484f-9e56-1e2b5c94a4ea"),
                            ArtistId = new Guid("4c9ca14a-fc48-4c72-bc0e-53b1bf70b917"),
                            Duration = new TimeSpan(0, 0, 7, 0, 0),
                            Price = 0,
                            Title = "No Quarter"
                        },
                        new
                        {
                            Id = new Guid("b21205e3-16b7-406d-b00f-14684889f4f3"),
                            AlbumId = new Guid("f662dfc9-2ac2-4ab2-ac6c-478eb6aade13"),
                            ArtistId = new Guid("b0501ae4-2e0b-4da5-b322-836c51e3361f"),
                            Duration = new TimeSpan(0, 0, 3, 0, 0),
                            Price = 0,
                            Title = "Death on Two Legs"
                        },
                        new
                        {
                            Id = new Guid("5dd56936-507b-40ce-bbf1-aed551f9676f"),
                            AlbumId = new Guid("f662dfc9-2ac2-4ab2-ac6c-478eb6aade13"),
                            ArtistId = new Guid("b0501ae4-2e0b-4da5-b322-836c51e3361f"),
                            Duration = new TimeSpan(0, 0, 3, 0, 0),
                            Price = 0,
                            Title = "You're My Best Friend"
                        },
                        new
                        {
                            Id = new Guid("a2b78639-841b-4e19-944f-fcc9d8499bef"),
                            AlbumId = new Guid("f662dfc9-2ac2-4ab2-ac6c-478eb6aade13"),
                            ArtistId = new Guid("b0501ae4-2e0b-4da5-b322-836c51e3361f"),
                            Duration = new TimeSpan(0, 0, 3, 0, 0),
                            Price = 0,
                            Title = "Love of My Life"
                        },
                        new
                        {
                            Id = new Guid("ad46e0b1-f283-4a31-a303-dcd348850259"),
                            AlbumId = new Guid("f662dfc9-2ac2-4ab2-ac6c-478eb6aade13"),
                            ArtistId = new Guid("b0501ae4-2e0b-4da5-b322-836c51e3361f"),
                            Duration = new TimeSpan(0, 0, 6, 0, 0),
                            Price = 0,
                            Title = "Bohemian Rhapsody"
                        },
                        new
                        {
                            Id = new Guid("18135237-f725-4646-87ad-0dda91cc15b3"),
                            AlbumId = new Guid("1c489fd7-4c49-40f6-9e6b-bce173392ef8"),
                            ArtistId = new Guid("b0501ae4-2e0b-4da5-b322-836c51e3361f"),
                            Duration = new TimeSpan(0, 0, 5, 0, 0),
                            Price = 0,
                            Title = "Radio Ga Ga"
                        },
                        new
                        {
                            Id = new Guid("2859f58f-54a3-475d-832d-bcfdb0cf6ea4"),
                            AlbumId = new Guid("1c489fd7-4c49-40f6-9e6b-bce173392ef8"),
                            ArtistId = new Guid("b0501ae4-2e0b-4da5-b322-836c51e3361f"),
                            Duration = new TimeSpan(0, 0, 3, 0, 0),
                            Price = 0,
                            Title = "Tear It Up"
                        },
                        new
                        {
                            Id = new Guid("835ecdac-45d0-40cb-b0d5-0b5c88956f96"),
                            AlbumId = new Guid("1c489fd7-4c49-40f6-9e6b-bce173392ef8"),
                            ArtistId = new Guid("b0501ae4-2e0b-4da5-b322-836c51e3361f"),
                            Duration = new TimeSpan(0, 0, 4, 0, 0),
                            Price = 0,
                            Title = "It's a Hard Life"
                        },
                        new
                        {
                            Id = new Guid("400ce2b6-2fb5-4e1f-b84a-a087692f37ab"),
                            AlbumId = new Guid("1c489fd7-4c49-40f6-9e6b-bce173392ef8"),
                            ArtistId = new Guid("b0501ae4-2e0b-4da5-b322-836c51e3361f"),
                            Duration = new TimeSpan(0, 0, 4, 0, 0),
                            Price = 0,
                            Title = "I Want to Break Free"
                        },
                        new
                        {
                            Id = new Guid("e2572102-ece7-4ac0-b1b2-772dd034d155"),
                            AlbumId = new Guid("11736c81-a365-4180-8e69-e0f30d879292"),
                            ArtistId = new Guid("26b70215-3f31-4e29-b2bd-a9033afff2c8"),
                            Duration = new TimeSpan(0, 0, 5, 0, 0),
                            Price = 0,
                            Title = "Smells Like Teen Spirit"
                        },
                        new
                        {
                            Id = new Guid("e9997d92-c6b0-4b95-9702-7b92478772fb"),
                            AlbumId = new Guid("11736c81-a365-4180-8e69-e0f30d879292"),
                            ArtistId = new Guid("26b70215-3f31-4e29-b2bd-a9033afff2c8"),
                            Duration = new TimeSpan(0, 0, 4, 0, 0),
                            Price = 0,
                            Title = "In Bloom"
                        },
                        new
                        {
                            Id = new Guid("5f1b9f1d-8f6d-4714-ad8a-7d19b16abac0"),
                            AlbumId = new Guid("11736c81-a365-4180-8e69-e0f30d879292"),
                            ArtistId = new Guid("26b70215-3f31-4e29-b2bd-a9033afff2c8"),
                            Duration = new TimeSpan(0, 0, 4, 0, 0),
                            Price = 0,
                            Title = "Come as You Are"
                        },
                        new
                        {
                            Id = new Guid("d7ccf7b2-4ce6-43fb-a1f8-cedb51edbcd3"),
                            AlbumId = new Guid("11736c81-a365-4180-8e69-e0f30d879292"),
                            ArtistId = new Guid("26b70215-3f31-4e29-b2bd-a9033afff2c8"),
                            Duration = new TimeSpan(0, 0, 5, 0, 0),
                            Price = 0,
                            Title = "Lithium"
                        },
                        new
                        {
                            Id = new Guid("aee6ce12-3da1-4eeb-8638-89d97d00ae18"),
                            AlbumId = new Guid("59a56f50-b7b5-414e-922a-c5c10d711178"),
                            ArtistId = new Guid("26b70215-3f31-4e29-b2bd-a9033afff2c8"),
                            Duration = new TimeSpan(0, 0, 4, 0, 0),
                            Price = 0,
                            Title = "Serve the Servants"
                        },
                        new
                        {
                            Id = new Guid("ef8ae4b8-e446-427d-959b-fbbb41020d54"),
                            AlbumId = new Guid("59a56f50-b7b5-414e-922a-c5c10d711178"),
                            ArtistId = new Guid("26b70215-3f31-4e29-b2bd-a9033afff2c8"),
                            Duration = new TimeSpan(0, 0, 5, 0, 0),
                            Price = 0,
                            Title = "Heart-Shaped Box"
                        },
                        new
                        {
                            Id = new Guid("0ea5de95-c3af-41fe-aae9-9c992dee2508"),
                            AlbumId = new Guid("59a56f50-b7b5-414e-922a-c5c10d711178"),
                            ArtistId = new Guid("26b70215-3f31-4e29-b2bd-a9033afff2c8"),
                            Duration = new TimeSpan(0, 0, 3, 0, 0),
                            Price = 0,
                            Title = "Rape Me"
                        },
                        new
                        {
                            Id = new Guid("0caddb2b-4393-4b63-9a4d-8a5557bc371f"),
                            AlbumId = new Guid("59a56f50-b7b5-414e-922a-c5c10d711178"),
                            ArtistId = new Guid("26b70215-3f31-4e29-b2bd-a9033afff2c8"),
                            Duration = new TimeSpan(0, 0, 4, 0, 0),
                            Price = 0,
                            Title = "Pennyroyal Tea"
                        });
                });

            modelBuilder.Entity("MusicStore.Domain.Domain.UserPlaylist", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MusicStoreApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("MusicStoreApplicationUserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserPlaylists");
                });

            modelBuilder.Entity("MusicStore.Domain.Identity.MusicStoreApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<Guid?>("UserCartId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("UserCartId");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("TrackUserPlaylist", b =>
                {
                    b.Property<Guid>("PlaylistsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TracksId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PlaylistsId", "TracksId");

                    b.HasIndex("TracksId");

                    b.ToTable("TrackUserPlaylist");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MusicStore.Domain.Identity.MusicStoreApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MusicStore.Domain.Identity.MusicStoreApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MusicStore.Domain.Identity.MusicStoreApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MusicStore.Domain.Identity.MusicStoreApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MusicStore.Domain.Domain.Album", b =>
                {
                    b.HasOne("MusicStore.Domain.Domain.Artist", "Artist")
                        .WithMany("Albums")
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artist");
                });

            modelBuilder.Entity("MusicStore.Domain.Domain.BoughtItem", b =>
                {
                    b.HasOne("MusicStore.Domain.Domain.Order", "Order")
                        .WithMany("BoughtItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("MusicStore.Domain.Domain.Order", b =>
                {
                    b.HasOne("MusicStore.Domain.Identity.MusicStoreApplicationUser", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("MusicStore.Domain.Domain.ShoppingCart", b =>
                {
                    b.HasOne("MusicStore.Domain.Identity.MusicStoreApplicationUser", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("MusicStore.Domain.Domain.ShoppingCartItem", b =>
                {
                    b.HasOne("MusicStore.Domain.Identity.MusicStoreApplicationUser", null)
                        .WithMany("PurchasedTracks")
                        .HasForeignKey("MusicStoreApplicationUserId");

                    b.HasOne("MusicStore.Domain.Domain.ShoppingCart", "shoppingCart")
                        .WithMany("Items")
                        .HasForeignKey("ShoppingCartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("shoppingCart");
                });

            modelBuilder.Entity("MusicStore.Domain.Domain.Track", b =>
                {
                    b.HasOne("MusicStore.Domain.Domain.Album", "Album")
                        .WithMany("Tracks")
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MusicStore.Domain.Domain.Artist", "Artist")
                        .WithMany("Tracks")
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Album");

                    b.Navigation("Artist");
                });

            modelBuilder.Entity("MusicStore.Domain.Domain.UserPlaylist", b =>
                {
                    b.HasOne("MusicStore.Domain.Identity.MusicStoreApplicationUser", null)
                        .WithMany("MyPlaylists")
                        .HasForeignKey("MusicStoreApplicationUserId");

                    b.HasOne("MusicStore.Domain.Identity.MusicStoreApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("User");
                });

            modelBuilder.Entity("MusicStore.Domain.Identity.MusicStoreApplicationUser", b =>
                {
                    b.HasOne("MusicStore.Domain.Domain.ShoppingCart", "UserCart")
                        .WithMany()
                        .HasForeignKey("UserCartId");

                    b.Navigation("UserCart");
                });

            modelBuilder.Entity("TrackUserPlaylist", b =>
                {
                    b.HasOne("MusicStore.Domain.Domain.UserPlaylist", null)
                        .WithMany()
                        .HasForeignKey("PlaylistsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MusicStore.Domain.Domain.Track", null)
                        .WithMany()
                        .HasForeignKey("TracksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MusicStore.Domain.Domain.Album", b =>
                {
                    b.Navigation("Tracks");
                });

            modelBuilder.Entity("MusicStore.Domain.Domain.Artist", b =>
                {
                    b.Navigation("Albums");

                    b.Navigation("Tracks");
                });

            modelBuilder.Entity("MusicStore.Domain.Domain.Order", b =>
                {
                    b.Navigation("BoughtItems");
                });

            modelBuilder.Entity("MusicStore.Domain.Domain.ShoppingCart", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("MusicStore.Domain.Identity.MusicStoreApplicationUser", b =>
                {
                    b.Navigation("MyPlaylists");

                    b.Navigation("PurchasedTracks");
                });
#pragma warning restore 612, 618
        }
    }
}
