// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MusicStoreApplication.Repository;

#nullable disable

namespace MusicStore.Repository.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250205193340_MakeOrderIdNullableAndSetNull")]
    partial class MakeOrderIdNullableAndSetNull
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MusicStore.Domain.Domain.Album", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AlbumImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ArtistId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ArtistId");

                    b.ToTable("Albums");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9aeec161-fdbf-43f2-9df6-ad9eecffa4f8"),
                            AlbumImageUrl = "https://i.discogs.com/1fwskTLM6cfxbdNmBDJ8expl6wab0tEgxvuloLIqKh8/rs:fit/g:sm/q:90/h:596/w:600/czM6Ly9kaXNjb2dz/LWRhdGFiYXNlLWlt/YWdlcy9SLTkyODc4/MDktMTQ3OTc1MzIz/Ni05NjE3LmpwZWc.jpeg",
                            ArtistId = new Guid("911a1646-4ba7-4d31-b632-2ef2c062fa15"),
                            Price = 20,
                            ReleaseDate = new DateTime(1973, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "The Dark Side of the Moon"
                        },
                        new
                        {
                            Id = new Guid("9939d5cc-8b92-43ce-81b6-51d4bca6bb70"),
                            AlbumImageUrl = "https://i.discogs.com/pZnTKUeiKsxSyvX_87YMgccx0bq5sjqThFH9iSNAtAY/rs:fit/g:sm/q:90/h:600/w:600/czM6Ly9kaXNjb2dz/LWRhdGFiYXNlLWlt/YWdlcy9SLTE2MjEx/ODEyLTE2MzczMzYw/OTctOTI4MC5qcGVn.jpeg",
                            ArtistId = new Guid("911a1646-4ba7-4d31-b632-2ef2c062fa15"),
                            Price = 22,
                            ReleaseDate = new DateTime(1975, 9, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Wish You Were Here"
                        },
                        new
                        {
                            Id = new Guid("955e64d1-f8af-49d2-813d-5a4be265bb01"),
                            AlbumImageUrl = "https://i.discogs.com/goWfjpqUBW8Y0xrqJG_GFz3fCTHPSWeKLZAX1alAAzk/rs:fit/g:sm/q:90/h:600/w:592/czM6Ly9kaXNjb2dz/LWRhdGFiYXNlLWlt/YWdlcy9SLTE0MTg2/NDQxLTE1Njk0ODcx/NjEtNzMxNC5qcGVn.jpeg",
                            ArtistId = new Guid("a64fb778-dcbd-43b8-93b5-588a76f923d8"),
                            Price = 25,
                            ReleaseDate = new DateTime(1969, 9, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Abbey Road"
                        },
                        new
                        {
                            Id = new Guid("e6289ca4-9a0b-460b-b1d3-4224e9656f77"),
                            AlbumImageUrl = "https://i.discogs.com/HWA3uoT2xu7zj_kM-f18f02CCQNKk2W8YzUL-D_l2ZM/rs:fit/g:sm/q:90/h:581/w:600/czM6Ly9kaXNjb2dz/LWRhdGFiYXNlLWlt/YWdlcy9SLTEwODgx/MjYtMTI1Njk1MDk3/OS5qcGVn.jpeg",
                            ArtistId = new Guid("a64fb778-dcbd-43b8-93b5-588a76f923d8"),
                            Price = 23,
                            ReleaseDate = new DateTime(1970, 5, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Let It Be"
                        },
                        new
                        {
                            Id = new Guid("50bd036b-34d3-4b24-932f-a6805629b5a9"),
                            AlbumImageUrl = "https://i.discogs.com/yFq3X0xZMxIVHIFgmbrsPvJHXLJCfVLWs60AL4XS4bs/rs:fit/g:sm/q:90/h:598/w:600/czM6Ly9kaXNjb2dz/LWRhdGFiYXNlLWlt/YWdlcy9SLTEwMTU0/NjUtMTM2NjMxMTg2/Ny0yNzg1LmpwZWc.jpeg",
                            ArtistId = new Guid("f8c0495d-adaa-45f1-9db4-ca7b1983fcda"),
                            Price = 24,
                            ReleaseDate = new DateTime(1971, 11, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Led Zeppelin IV"
                        },
                        new
                        {
                            Id = new Guid("c8684cd1-a8ae-47d5-a017-4d0f0941f23c"),
                            AlbumImageUrl = "https://i.discogs.com/BLWVi0t0llSqJvIybHrSvPql-RfORCmZU1klNfV0si8/rs:fit/g:sm/q:90/h:600/w:600/czM6Ly9kaXNjb2dz/LWRhdGFiYXNlLWlt/YWdlcy9SLTQ1NTA3/Ny0xNTg4ODgwNzg4/LTIyMjYuanBlZw.jpeg",
                            ArtistId = new Guid("f8c0495d-adaa-45f1-9db4-ca7b1983fcda"),
                            Price = 26,
                            ReleaseDate = new DateTime(1973, 3, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Houses of the Holy"
                        },
                        new
                        {
                            Id = new Guid("74c096d7-a565-4fbc-b65d-cf962adca542"),
                            AlbumImageUrl = "https://i.discogs.com/2GXnNYolz0ciUnj8-ycSwQ8Uuy0Qu7LCfiZivZ0p_bo/rs:fit/g:sm/q:90/h:594/w:600/czM6Ly9kaXNjb2dz/LWRhdGFiYXNlLWlt/YWdlcy9SLTYxMjc4/MC0xNTQxMzY3MTQ1/LTIxMjcuanBlZw.jpeg",
                            ArtistId = new Guid("0a5a6408-a484-45f9-9609-e73059158289"),
                            Price = 21,
                            ReleaseDate = new DateTime(1975, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "A Night at the Opera"
                        },
                        new
                        {
                            Id = new Guid("fd93596a-99fc-4636-b0d8-8e9630ade643"),
                            AlbumImageUrl = "https://i.discogs.com/p2o5GGONaTq4jK398iU0X3KjuMfnK10_TEC_bdnKA6k/rs:fit/g:sm/q:90/h:600/w:600/czM6Ly9kaXNjb2dz/LWRhdGFiYXNlLWlt/YWdlcy9SLTMzMjg5/ODItMTM1NzgxOTE3/NS05NTU3LmpwZWc.jpeg",
                            ArtistId = new Guid("0a5a6408-a484-45f9-9609-e73059158289"),
                            Price = 19,
                            ReleaseDate = new DateTime(1984, 2, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "The Works"
                        },
                        new
                        {
                            Id = new Guid("a44a2b55-8237-4c54-ba0f-1656536630f8"),
                            AlbumImageUrl = "https://i.discogs.com/XoAXkLe03Vk0Kt-oQqw7V9uW5nBzQdNvZd0zar5mOiQ/rs:fit/g:sm/q:90/h:592/w:600/czM6Ly9kaXNjb2dz/LWRhdGFiYXNlLWlt/YWdlcy9SLTM2NzA4/NC0xMjYzMDk1NTUz/LmpwZWc.jpeg",
                            ArtistId = new Guid("3ce30c3d-c447-4a1e-ae4d-6a084c558caf"),
                            Price = 18,
                            ReleaseDate = new DateTime(1991, 9, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Nevermind"
                        },
                        new
                        {
                            Id = new Guid("4d9dc852-f291-4f9f-8a1f-0643e2416c3f"),
                            AlbumImageUrl = "https://i.discogs.com/ijIUNhH--0OKzKuKv-aLpgFkb7lr6OQVb5FcAF_aW0U/rs:fit/g:sm/q:90/h:594/w:600/czM6Ly9kaXNjb2dz/LWRhdGFiYXNlLWlt/YWdlcy9SLTM3NTk3/OS0xNDkxNzAwMzQ3/LTcyNjMuanBlZw.jpeg",
                            ArtistId = new Guid("3ce30c3d-c447-4a1e-ae4d-6a084c558caf"),
                            Price = 20,
                            ReleaseDate = new DateTime(1993, 9, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "In Utero"
                        });
                });

            modelBuilder.Entity("MusicStore.Domain.Domain.Artist", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Artists");

                    b.HasData(
                        new
                        {
                            Id = new Guid("911a1646-4ba7-4d31-b632-2ef2c062fa15"),
                            Bio = "A legendary rock band.",
                            Name = "Pink Floyd"
                        },
                        new
                        {
                            Id = new Guid("a64fb778-dcbd-43b8-93b5-588a76f923d8"),
                            Bio = "One of the most influential rock bands.",
                            Name = "The Beatles"
                        },
                        new
                        {
                            Id = new Guid("f8c0495d-adaa-45f1-9db4-ca7b1983fcda"),
                            Bio = "A rock band known for its heavy sound.",
                            Name = "Led Zeppelin"
                        },
                        new
                        {
                            Id = new Guid("0a5a6408-a484-45f9-9609-e73059158289"),
                            Bio = "A rock band known for its eclectic musical style.",
                            Name = "Queen"
                        },
                        new
                        {
                            Id = new Guid("3ce30c3d-c447-4a1e-ae4d-6a084c558caf"),
                            Bio = "A grunge band that shaped the 90s music scene.",
                            Name = "Nirvana"
                        });
                });

            modelBuilder.Entity("MusicStore.Domain.Domain.BoughtItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("BoughtItems");
                });

            modelBuilder.Entity("MusicStore.Domain.Domain.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("OwnerId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("MusicStore.Domain.Domain.ShoppingCart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OwnerId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("ShoppingCarts");
                });

            modelBuilder.Entity("MusicStore.Domain.Domain.ShoppingCartItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MusicStoreApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ShoppingCartId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("MusicStoreApplicationUserId");

                    b.HasIndex("ShoppingCartId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("MusicStore.Domain.Domain.Track", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AlbumId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ArtistId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("TrackImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AlbumId");

                    b.HasIndex("ArtistId");

                    b.ToTable("Tracks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8909e7f1-668c-4242-af61-5cd342a5bc47"),
                            AlbumId = new Guid("9aeec161-fdbf-43f2-9df6-ad9eecffa4f8"),
                            ArtistId = new Guid("911a1646-4ba7-4d31-b632-2ef2c062fa15"),
                            Duration = new TimeSpan(0, 0, 1, 0, 0),
                            Price = 129,
                            Title = "Speak to Me",
                            TrackImageUrl = "https://i.discogs.com/E9E7stvIt5YKUfK_CnrpIgxchviC7Q4WCeyQuuICAjo/rs:fit/g:sm/q:90/h:397/w:600/czM6Ly9kaXNjb2dz/LWRhdGFiYXNlLWlt/YWdlcy9SLTE4NzMw/MTMtMTI0OTMwMDYw/MC5qcGVn.jpeg"
                        },
                        new
                        {
                            Id = new Guid("c541d07e-d70d-444a-9355-657392d9b2c5"),
                            AlbumId = new Guid("9aeec161-fdbf-43f2-9df6-ad9eecffa4f8"),
                            ArtistId = new Guid("911a1646-4ba7-4d31-b632-2ef2c062fa15"),
                            Duration = new TimeSpan(0, 0, 2, 0, 0),
                            Price = 129,
                            Title = "Breathe in the air",
                            TrackImageUrl = "https://i.discogs.com/mfba8kz9-PIwZGE5g70Z5i6JpITmeRfaXLsWClcxj8g/rs:fit/g:sm/q:90/h:500/w:500/czM6Ly9kaXNjb2dz/LWRhdGFiYXNlLWlt/YWdlcy9SLTI4NzAw/MjYwLTE2OTgyMzg5/MDItNDY5NS5qcGVn.jpeg"
                        },
                        new
                        {
                            Id = new Guid("08576d3b-62a8-404a-b780-5fecd878e780"),
                            AlbumId = new Guid("9aeec161-fdbf-43f2-9df6-ad9eecffa4f8"),
                            ArtistId = new Guid("911a1646-4ba7-4d31-b632-2ef2c062fa15"),
                            Duration = new TimeSpan(0, 0, 3, 0, 0),
                            Price = 129,
                            Title = "On the Run",
                            TrackImageUrl = "https://i.discogs.com/t4BbENT4ugUFTY-pgCqTcEHhlfwlrJeJuyTOTzqxKfM/rs:fit/g:sm/q:90/h:597/w:600/czM6Ly9kaXNjb2dz/LWRhdGFiYXNlLWlt/YWdlcy9SLTE4NzMw/MTMtMTcyNzc2NDky/OS03ODUzLmpwZWc.jpeg"
                        },
                        new
                        {
                            Id = new Guid("e82cf279-452b-40f4-a98e-7681e011ae51"),
                            AlbumId = new Guid("9aeec161-fdbf-43f2-9df6-ad9eecffa4f8"),
                            ArtistId = new Guid("911a1646-4ba7-4d31-b632-2ef2c062fa15"),
                            Duration = new TimeSpan(0, 0, 6, 0, 0),
                            Price = 129,
                            Title = "Time",
                            TrackImageUrl = "https://i.discogs.com/rCpj_7gUWtxKDPQQpoVwbrud6zN2wwyQRVFR-ZaNtFI/rs:fit/g:sm/q:90/h:380/w:577/czM6Ly9kaXNjb2dz/LWRhdGFiYXNlLWlt/YWdlcy9SLTE4NzMw/MTMtMTI0OTMwMDU4/MS5qcGVn.jpeg"
                        },
                        new
                        {
                            Id = new Guid("1ab4df3c-4213-48a8-958f-17cf56d5c63c"),
                            AlbumId = new Guid("9939d5cc-8b92-43ce-81b6-51d4bca6bb70"),
                            ArtistId = new Guid("911a1646-4ba7-4d31-b632-2ef2c062fa15"),
                            Duration = new TimeSpan(0, 0, 13, 0, 0),
                            Price = 129,
                            Title = "Shine On You Crazy Diamond (Part I-V)",
                            TrackImageUrl = "https://i.discogs.com/pZnTKUeiKsxSyvX_87YMgccx0bq5sjqThFH9iSNAtAY/rs:fit/g:sm/q:90/h:600/w:600/czM6Ly9kaXNjb2dz/LWRhdGFiYXNlLWlt/YWdlcy9SLTE2MjEx/ODEyLTE2MzczMzYw/OTctOTI4MC5qcGVn.jpeg"
                        },
                        new
                        {
                            Id = new Guid("8fe04cee-4815-42b2-8ce8-20ca9f457954"),
                            AlbumId = new Guid("9939d5cc-8b92-43ce-81b6-51d4bca6bb70"),
                            ArtistId = new Guid("911a1646-4ba7-4d31-b632-2ef2c062fa15"),
                            Duration = new TimeSpan(0, 0, 7, 0, 0),
                            Price = 129,
                            Title = "Welcome to the Machine",
                            TrackImageUrl = "https://i.discogs.com/a36kcqXYhsvwN7S1cyq8_CGqqyWi78u3CLtxuE86-Go/rs:fit/g:sm/q:90/h:600/w:600/czM6Ly9kaXNjb2dz/LWRhdGFiYXNlLWlt/YWdlcy9SLTE2MjEx/ODEyLTE2MzczMzYw/OTYtMTc3Mi5qcGVn.jpeg"
                        },
                        new
                        {
                            Id = new Guid("9d022888-befd-4274-b729-7255cecd4765"),
                            AlbumId = new Guid("9939d5cc-8b92-43ce-81b6-51d4bca6bb70"),
                            ArtistId = new Guid("911a1646-4ba7-4d31-b632-2ef2c062fa15"),
                            Duration = new TimeSpan(0, 0, 5, 0, 0),
                            Price = 129,
                            Title = "Have a Cigar",
                            TrackImageUrl = "https://i.discogs.com/frk8i23GN3Epw5RaA-um7KwmBw0NTQiEHUYtirXaqdg/rs:fit/g:sm/q:90/h:600/w:600/czM6Ly9kaXNjb2dz/LWRhdGFiYXNlLWlt/YWdlcy9SLTE2MjEx/ODEyLTE2MzczMzYx/MDgtMTIxMi5qcGVn.jpeg"
                        },
                        new
                        {
                            Id = new Guid("38a29651-7652-484f-bb93-dfd0f0a4df85"),
                            AlbumId = new Guid("9939d5cc-8b92-43ce-81b6-51d4bca6bb70"),
                            ArtistId = new Guid("911a1646-4ba7-4d31-b632-2ef2c062fa15"),
                            Duration = new TimeSpan(0, 0, 5, 0, 0),
                            Price = 129,
                            Title = "Wish You Were Here",
                            TrackImageUrl = "https://i.discogs.com/hJBh2v_V6Ow6_hyPu791g1d_Pqj6_aoKB6fm_JUKUPA/rs:fit/g:sm/q:90/h:600/w:600/czM6Ly9kaXNjb2dz/LWRhdGFiYXNlLWlt/YWdlcy9SLTE2MjEx/ODEyLTE2MzczMzYx/MjgtNDE1My5qcGVn.jpeg"
                        },
                        new
                        {
                            Id = new Guid("da7453d3-7430-44e1-a1f3-0b477d7a8cf0"),
                            AlbumId = new Guid("955e64d1-f8af-49d2-813d-5a4be265bb01"),
                            ArtistId = new Guid("a64fb778-dcbd-43b8-93b5-588a76f923d8"),
                            Duration = new TimeSpan(0, 0, 4, 0, 0),
                            Price = 129,
                            Title = "Come Together",
                            TrackImageUrl = "https://i.discogs.com/M2yc5OJZPdVoDm2_UlRRXuDlDguamLLSdnbziNmZoQI/rs:fit/g:sm/q:90/h:600/w:600/czM6Ly9kaXNjb2dz/LWRhdGFiYXNlLWlt/YWdlcy9SLTI2MDc0/MjQtMTYzMDYwMTA4/Ny0xMTk5LmpwZWc.jpeg"
                        },
                        new
                        {
                            Id = new Guid("9b4faac5-2c4a-45c2-a5ff-73cb3f223367"),
                            AlbumId = new Guid("955e64d1-f8af-49d2-813d-5a4be265bb01"),
                            ArtistId = new Guid("a64fb778-dcbd-43b8-93b5-588a76f923d8"),
                            Duration = new TimeSpan(0, 0, 3, 0, 0),
                            Price = 129,
                            Title = "Something",
                            TrackImageUrl = "https://i.discogs.com/M2yc5OJZPdVoDm2_UlRRXuDlDguamLLSdnbziNmZoQI/rs:fit/g:sm/q:90/h:600/w:600/czM6Ly9kaXNjb2dz/LWRhdGFiYXNlLWlt/YWdlcy9SLTI2MDc0/MjQtMTYzMDYwMTA4/Ny0xMTk5LmpwZWc.jpeg"
                        },
                        new
                        {
                            Id = new Guid("1149c0c2-aae5-4a8a-9a62-fa4d4be5f22a"),
                            AlbumId = new Guid("955e64d1-f8af-49d2-813d-5a4be265bb01"),
                            ArtistId = new Guid("a64fb778-dcbd-43b8-93b5-588a76f923d8"),
                            Duration = new TimeSpan(0, 0, 3, 0, 0),
                            Price = 129,
                            Title = "Octopus's Garden",
                            TrackImageUrl = "https://i.discogs.com/M2yc5OJZPdVoDm2_UlRRXuDlDguamLLSdnbziNmZoQI/rs:fit/g:sm/q:90/h:600/w:600/czM6Ly9kaXNjb2dz/LWRhdGFiYXNlLWlt/YWdlcy9SLTI2MDc0/MjQtMTYzMDYwMTA4/Ny0xMTk5LmpwZWc.jpeg"
                        },
                        new
                        {
                            Id = new Guid("4917a5f8-2a6d-4e6b-a73d-19a957941b59"),
                            AlbumId = new Guid("955e64d1-f8af-49d2-813d-5a4be265bb01"),
                            ArtistId = new Guid("a64fb778-dcbd-43b8-93b5-588a76f923d8"),
                            Duration = new TimeSpan(0, 0, 3, 0, 0),
                            Price = 129,
                            Title = "Here Comes the Sun",
                            TrackImageUrl = "https://i.discogs.com/qsJyhu9LR8BERwbo5DRIYdNJzZFyuxQMr3RJcnOSEkw/rs:fit/g:sm/q:90/h:597/w:600/czM6Ly9kaXNjb2dz/LWRhdGFiYXNlLWlt/YWdlcy9SLTgxMzcz/NTUtMTQ1NTgzODU3/My0zNDk0LmpwZWc.jpeg"
                        },
                        new
                        {
                            Id = new Guid("8190643a-08db-4f6c-b914-23baf9d437a5"),
                            AlbumId = new Guid("e6289ca4-9a0b-460b-b1d3-4224e9656f77"),
                            ArtistId = new Guid("a64fb778-dcbd-43b8-93b5-588a76f923d8"),
                            Duration = new TimeSpan(0, 0, 4, 0, 0),
                            Price = 129,
                            Title = "Let It Be",
                            TrackImageUrl = "https://i.discogs.com/hAdrrjfnT2klIYc1V_oKX5HjpJ3xElwd7FDaDydTFGo/rs:fit/g:sm/q:90/h:600/w:566/czM6Ly9kaXNjb2dz/LWRhdGFiYXNlLWlt/YWdlcy9SLTM3NzU1/NC0xMzQ0NTE5Njg4/LTU0MzkuanBlZw.jpeg"
                        },
                        new
                        {
                            Id = new Guid("55bab500-2844-4d45-9d96-023932ebe9a2"),
                            AlbumId = new Guid("e6289ca4-9a0b-460b-b1d3-4224e9656f77"),
                            ArtistId = new Guid("a64fb778-dcbd-43b8-93b5-588a76f923d8"),
                            Duration = new TimeSpan(0, 0, 3, 0, 0),
                            Price = 129,
                            Title = "Across the Universe",
                            TrackImageUrl = "https://i.discogs.com/KFfU_VOBY43WsttSMHMp0uUvaQ8Sk63qAoCDeTeENpE/rs:fit/g:sm/q:90/h:598/w:600/czM6Ly9kaXNjb2dz/LWRhdGFiYXNlLWlt/YWdlcy9SLTM3NzU1/NC0xMzQ1NjcxNjIy/LTM1ODYuanBlZw.jpeg"
                        },
                        new
                        {
                            Id = new Guid("aba2672b-5506-4972-8935-54a21d74d2d7"),
                            AlbumId = new Guid("e6289ca4-9a0b-460b-b1d3-4224e9656f77"),
                            ArtistId = new Guid("a64fb778-dcbd-43b8-93b5-588a76f923d8"),
                            Duration = new TimeSpan(0, 0, 3, 0, 0),
                            Price = 129,
                            Title = "The Long and Winding Road",
                            TrackImageUrl = "https://i.discogs.com/3C94Ivdig0n1Jyb8d_0jKoIvj54r56hYW6kb6kiM8cY/rs:fit/g:sm/q:90/h:600/w:595/czM6Ly9kaXNjb2dz/LWRhdGFiYXNlLWlt/YWdlcy9SLTM3NzU1/NC0xMzI2NzA0NzMw/LmpwZWc.jpeg"
                        },
                        new
                        {
                            Id = new Guid("ae744f21-ff83-4643-8fb4-8b676fa6016f"),
                            AlbumId = new Guid("e6289ca4-9a0b-460b-b1d3-4224e9656f77"),
                            ArtistId = new Guid("a64fb778-dcbd-43b8-93b5-588a76f923d8"),
                            Duration = new TimeSpan(0, 0, 3, 0, 0),
                            Price = 129,
                            Title = "Get Back",
                            TrackImageUrl = "https://i.discogs.com/yZ8hA52tgMGcdxfY182_OqxJIjUuzu1NvwVKxNM_Ztg/rs:fit/g:sm/q:90/h:599/w:600/czM6Ly9kaXNjb2dz/LWRhdGFiYXNlLWlt/YWdlcy9SLTM3NzU1/NC0xMzI2NzA0NzIw/LmpwZWc.jpeg"
                        },
                        new
                        {
                            Id = new Guid("88194897-22bf-4dcc-aa92-1d9b6b962e98"),
                            AlbumId = new Guid("50bd036b-34d3-4b24-932f-a6805629b5a9"),
                            ArtistId = new Guid("f8c0495d-adaa-45f1-9db4-ca7b1983fcda"),
                            Duration = new TimeSpan(0, 0, 4, 0, 0),
                            Price = 129,
                            Title = "Black Dog",
                            TrackImageUrl = "https://i.discogs.com/Ok43Qrm9pIMNTCCCR5oXwL9XU_0_WxXdRl6RKeXfxBg/rs:fit/g:sm/q:90/h:600/w:595/czM6Ly9kaXNjb2dz/LWRhdGFiYXNlLWlt/YWdlcy9SLTEwMTU0/NjUtMTU5Mjc0NzQ3/My00NDI0LmpwZWc.jpeg"
                        },
                        new
                        {
                            Id = new Guid("24378446-af44-4923-9d10-5807af48884f"),
                            AlbumId = new Guid("50bd036b-34d3-4b24-932f-a6805629b5a9"),
                            ArtistId = new Guid("f8c0495d-adaa-45f1-9db4-ca7b1983fcda"),
                            Duration = new TimeSpan(0, 0, 3, 0, 0),
                            Price = 129,
                            Title = "Rock and Roll",
                            TrackImageUrl = "https://i.discogs.com/aFc_fainrAcSiX2MbERPPWWlvjeYKc0D4yf53WD4rzM/rs:fit/g:sm/q:90/h:592/w:600/czM6Ly9kaXNjb2dz/LWRhdGFiYXNlLWlt/YWdlcy9SLTEwMTU0/NjUtMTU5Mjc0NzQ3/NC00ODYwLmpwZWc.jpeg"
                        },
                        new
                        {
                            Id = new Guid("46820f41-dd97-4b8a-a832-6504e220d3cc"),
                            AlbumId = new Guid("50bd036b-34d3-4b24-932f-a6805629b5a9"),
                            ArtistId = new Guid("f8c0495d-adaa-45f1-9db4-ca7b1983fcda"),
                            Duration = new TimeSpan(0, 0, 8, 0, 0),
                            Price = 129,
                            Title = "Stairway to Heaven",
                            TrackImageUrl = "https://i.discogs.com/AO-PmjrMZa3JNJ8NBErUUcDOJ2Yna2jCNLbwmZ0n9aE/rs:fit/g:sm/q:90/h:600/w:597/czM6Ly9kaXNjb2dz/LWRhdGFiYXNlLWlt/YWdlcy9SLTc1Nzg1/NC0xNTE1ODU0Mjcx/LTM3NDUuanBlZw.jpeg"
                        },
                        new
                        {
                            Id = new Guid("40739108-855f-4588-b333-33b49ce96430"),
                            AlbumId = new Guid("50bd036b-34d3-4b24-932f-a6805629b5a9"),
                            ArtistId = new Guid("f8c0495d-adaa-45f1-9db4-ca7b1983fcda"),
                            Duration = new TimeSpan(0, 0, 3, 0, 0),
                            Price = 129,
                            Title = "Going to California",
                            TrackImageUrl = "https://i.discogs.com/kOYbkKoJqpZfHNMg38TaBrOQmJWYO8UoRWV_BOgR6MA/rs:fit/g:sm/q:90/h:600/w:600/czM6Ly9kaXNjb2dz/LWRhdGFiYXNlLWlt/YWdlcy9SLTEwMTU0/NjUtMTM2NjMxMTg4/My02MDE1LmpwZWc.jpeg"
                        },
                        new
                        {
                            Id = new Guid("d8160563-899f-402c-8edf-bbd2771a693b"),
                            AlbumId = new Guid("c8684cd1-a8ae-47d5-a017-4d0f0941f23c"),
                            ArtistId = new Guid("f8c0495d-adaa-45f1-9db4-ca7b1983fcda"),
                            Duration = new TimeSpan(0, 0, 5, 0, 0),
                            Price = 129,
                            Title = "The Song Remains the Same",
                            TrackImageUrl = "https://i.discogs.com/PGoolvGRHExppmuvEDxPETmRJAFIlpoSAZ41ws86GLw/rs:fit/g:sm/q:90/h:577/w:590/czM6Ly9kaXNjb2dz/LWRhdGFiYXNlLWlt/YWdlcy9SLTQ1NTA3/Ny0xMzkxNTIyMzA2/LTU4MzMuanBlZw.jpeg"
                        },
                        new
                        {
                            Id = new Guid("e41a8157-8ccf-444b-9657-57556e608e41"),
                            AlbumId = new Guid("c8684cd1-a8ae-47d5-a017-4d0f0941f23c"),
                            ArtistId = new Guid("f8c0495d-adaa-45f1-9db4-ca7b1983fcda"),
                            Duration = new TimeSpan(0, 0, 7, 0, 0),
                            Price = 129,
                            Title = "The Rain Song",
                            TrackImageUrl = "https://i.discogs.com/8wnDvfzEjV9Wc1BBxbaIIUeBhIxQ7WeFsKjdwt9hoWc/rs:fit/g:sm/q:90/h:574/w:590/czM6Ly9kaXNjb2dz/LWRhdGFiYXNlLWlt/YWdlcy9SLTQ1NTA3/Ny0xMzkxNTIyMjY2/LTY4MzkuanBlZw.jpeg"
                        },
                        new
                        {
                            Id = new Guid("dba66f88-92f3-415d-b2d3-a74534c8d351"),
                            AlbumId = new Guid("c8684cd1-a8ae-47d5-a017-4d0f0941f23c"),
                            ArtistId = new Guid("f8c0495d-adaa-45f1-9db4-ca7b1983fcda"),
                            Duration = new TimeSpan(0, 0, 4, 0, 0),
                            Price = 129,
                            Title = "Over the Hills and Far Away",
                            TrackImageUrl = "https://i.discogs.com/QVRkVVBO1gFfafoFfNzNps67VKs1DsGRcHQ474zEDf0/rs:fit/g:sm/q:90/h:224/w:452/czM6Ly9kaXNjb2dz/LWRhdGFiYXNlLWlt/YWdlcy9SLTQ1NTA3/Ny0xMTcxOTI0MzQz/LmpwZWc.jpeg"
                        },
                        new
                        {
                            Id = new Guid("5b87080f-4e8d-4e0d-8296-ca72abe80fca"),
                            AlbumId = new Guid("c8684cd1-a8ae-47d5-a017-4d0f0941f23c"),
                            ArtistId = new Guid("f8c0495d-adaa-45f1-9db4-ca7b1983fcda"),
                            Duration = new TimeSpan(0, 0, 7, 0, 0),
                            Price = 129,
                            Title = "No Quarter",
                            TrackImageUrl = "https://i.discogs.com/BLWVi0t0llSqJvIybHrSvPql-RfORCmZU1klNfV0si8/rs:fit/g:sm/q:90/h:600/w:600/czM6Ly9kaXNjb2dz/LWRhdGFiYXNlLWlt/YWdlcy9SLTQ1NTA3/Ny0xNTg4ODgwNzg4/LTIyMjYuanBlZw.jpeg"
                        },
                        new
                        {
                            Id = new Guid("a422a5ff-f9b4-43b5-9a49-72d341a477ba"),
                            AlbumId = new Guid("74c096d7-a565-4fbc-b65d-cf962adca542"),
                            ArtistId = new Guid("0a5a6408-a484-45f9-9609-e73059158289"),
                            Duration = new TimeSpan(0, 0, 3, 0, 0),
                            Price = 129,
                            Title = "Death on Two Legs",
                            TrackImageUrl = "https://i.discogs.com/exLiE9TUHd1Osv4-SBjJsO8zScHQQ2s5XTA7QzvHmjk/rs:fit/g:sm/q:90/h:591/w:595/czM6Ly9kaXNjb2dz/LWRhdGFiYXNlLWlt/YWdlcy9SLTYxMjc4/MC0xNTQxMzY3MTQy/LTU2OTMuanBlZw.jpeg"
                        },
                        new
                        {
                            Id = new Guid("e05be34b-bb40-44e9-a405-a28f4bf90552"),
                            AlbumId = new Guid("74c096d7-a565-4fbc-b65d-cf962adca542"),
                            ArtistId = new Guid("0a5a6408-a484-45f9-9609-e73059158289"),
                            Duration = new TimeSpan(0, 0, 3, 0, 0),
                            Price = 129,
                            Title = "You're My Best Friend",
                            TrackImageUrl = "https://i.discogs.com/2GXnNYolz0ciUnj8-ycSwQ8Uuy0Qu7LCfiZivZ0p_bo/rs:fit/g:sm/q:90/h:594/w:600/czM6Ly9kaXNjb2dz/LWRhdGFiYXNlLWlt/YWdlcy9SLTYxMjc4/MC0xNTQxMzY3MTQ1/LTIxMjcuanBlZw.jpeg"
                        },
                        new
                        {
                            Id = new Guid("3663936c-91fe-4954-bbd4-c4693704553b"),
                            AlbumId = new Guid("74c096d7-a565-4fbc-b65d-cf962adca542"),
                            ArtistId = new Guid("0a5a6408-a484-45f9-9609-e73059158289"),
                            Duration = new TimeSpan(0, 0, 3, 0, 0),
                            Price = 129,
                            Title = "Love of My Life",
                            TrackImageUrl = "https://i.discogs.com/2GXnNYolz0ciUnj8-ycSwQ8Uuy0Qu7LCfiZivZ0p_bo/rs:fit/g:sm/q:90/h:594/w:600/czM6Ly9kaXNjb2dz/LWRhdGFiYXNlLWlt/YWdlcy9SLTYxMjc4/MC0xNTQxMzY3MTQ1/LTIxMjcuanBlZw.jpeg"
                        },
                        new
                        {
                            Id = new Guid("2d45cf8f-2fa6-421c-9be5-accff0a42511"),
                            AlbumId = new Guid("74c096d7-a565-4fbc-b65d-cf962adca542"),
                            ArtistId = new Guid("0a5a6408-a484-45f9-9609-e73059158289"),
                            Duration = new TimeSpan(0, 0, 6, 0, 0),
                            Price = 129,
                            Title = "Bohemian Rhapsody",
                            TrackImageUrl = "https://i.discogs.com/_RN78C49qgCxMX3CnRdxDggOCSI5P7uYaUGJ_Pl_CGM/rs:fit/g:sm/q:90/h:567/w:574/czM6Ly9kaXNjb2dz/LWRhdGFiYXNlLWlt/YWdlcy9SLTM2OTg5/MC0xMzkzMjg2NDQz/LTU3NTUuanBlZw.jpeg"
                        },
                        new
                        {
                            Id = new Guid("80ae42c3-ce6b-4890-a9b1-786dc170ee30"),
                            AlbumId = new Guid("fd93596a-99fc-4636-b0d8-8e9630ade643"),
                            ArtistId = new Guid("0a5a6408-a484-45f9-9609-e73059158289"),
                            Duration = new TimeSpan(0, 0, 5, 0, 0),
                            Price = 129,
                            Title = "Radio Ga Ga",
                            TrackImageUrl = "https://i.discogs.com/b20JvPlll2B74GR7tMh3oSukHbeTjq3cyTBpdKk25fA/rs:fit/g:sm/q:90/h:600/w:598/czM6Ly9kaXNjb2dz/LWRhdGFiYXNlLWlt/YWdlcy9SLTE1MTU5/MTEtMTU5OTIzODcx/MS05NjI1LmpwZWc.jpeg"
                        },
                        new
                        {
                            Id = new Guid("54bd2221-651b-487d-9f5d-6108f34737c8"),
                            AlbumId = new Guid("fd93596a-99fc-4636-b0d8-8e9630ade643"),
                            ArtistId = new Guid("0a5a6408-a484-45f9-9609-e73059158289"),
                            Duration = new TimeSpan(0, 0, 3, 0, 0),
                            Price = 129,
                            Title = "Tear It Up",
                            TrackImageUrl = "https://i.discogs.com/TNq6BKsREuTvVL0QtgziQ0ACcLNhKq9AjP-NYI7yo14/rs:fit/g:sm/q:90/h:600/w:600/czM6Ly9kaXNjb2dz/LWRhdGFiYXNlLWlt/YWdlcy9SLTQ3NTU5/Ni0xNDU0NzA3NDYw/LTIxNzkuanBlZw.jpeg"
                        },
                        new
                        {
                            Id = new Guid("4cc828da-852b-4d28-a831-1b33670afb96"),
                            AlbumId = new Guid("fd93596a-99fc-4636-b0d8-8e9630ade643"),
                            ArtistId = new Guid("0a5a6408-a484-45f9-9609-e73059158289"),
                            Duration = new TimeSpan(0, 0, 4, 0, 0),
                            Price = 129,
                            Title = "It's a Hard Life",
                            TrackImageUrl = "https://i.discogs.com/gdK1Z8e8y1qZybHe6WF_NXUstJzEhHSId63nx0GS_Yo/rs:fit/g:sm/q:90/h:600/w:600/czM6Ly9kaXNjb2dz/LWRhdGFiYXNlLWlt/YWdlcy9SLTE1OTU3/NTktMTIzMTA1Njkw/MS5qcGVn.jpeg"
                        },
                        new
                        {
                            Id = new Guid("8b6fc296-a99d-4ac7-af3d-549653e2d4cc"),
                            AlbumId = new Guid("fd93596a-99fc-4636-b0d8-8e9630ade643"),
                            ArtistId = new Guid("0a5a6408-a484-45f9-9609-e73059158289"),
                            Duration = new TimeSpan(0, 0, 4, 0, 0),
                            Price = 129,
                            Title = "I Want to Break Free",
                            TrackImageUrl = "https://i.discogs.com/GZW57VCYRIgmdlkLRQwj_ZejpTs1lW3TiH-m5zJzvKg/rs:fit/g:sm/q:90/h:600/w:599/czM6Ly9kaXNjb2dz/LWRhdGFiYXNlLWlt/YWdlcy9SLTE1NDU5/MDAtMTIyNzQzNTEx/NS5qcGVn.jpeg"
                        },
                        new
                        {
                            Id = new Guid("493439ff-57ab-4de5-9e45-8ee0019ec87a"),
                            AlbumId = new Guid("a44a2b55-8237-4c54-ba0f-1656536630f8"),
                            ArtistId = new Guid("3ce30c3d-c447-4a1e-ae4d-6a084c558caf"),
                            Duration = new TimeSpan(0, 0, 5, 0, 0),
                            Price = 129,
                            Title = "Smells Like Teen Spirit",
                            TrackImageUrl = "https://i.discogs.com/MsIpIcpdbgg0r3CYB39OlwwuT81PuQ0psUcDvRLTdUU/rs:fit/g:sm/q:90/h:528/w:600/czM6Ly9kaXNjb2dz/LWRhdGFiYXNlLWlt/YWdlcy9SLTM3MzI3/OC0xMzQwMTcwNjI1/LTMwNzguanBlZw.jpeg"
                        },
                        new
                        {
                            Id = new Guid("fe698329-5ff4-4c6c-9620-f04a345bc7b3"),
                            AlbumId = new Guid("a44a2b55-8237-4c54-ba0f-1656536630f8"),
                            ArtistId = new Guid("3ce30c3d-c447-4a1e-ae4d-6a084c558caf"),
                            Duration = new TimeSpan(0, 0, 4, 0, 0),
                            Price = 129,
                            Title = "In Bloom",
                            TrackImageUrl = "https://i.discogs.com/6fsdEUC3-9WQy2tB4PmRvGcYrKPtggYbUSgD5QyZQQ4/rs:fit/g:sm/q:90/h:600/w:600/czM6Ly9kaXNjb2dz/LWRhdGFiYXNlLWlt/YWdlcy9SLTEzNDgz/ODctMTY4MDY3ODQ1/My05NTcwLmpwZWc.jpeg"
                        },
                        new
                        {
                            Id = new Guid("2dfe7f02-8bd9-4b0a-8a95-186a07f32673"),
                            AlbumId = new Guid("a44a2b55-8237-4c54-ba0f-1656536630f8"),
                            ArtistId = new Guid("3ce30c3d-c447-4a1e-ae4d-6a084c558caf"),
                            Duration = new TimeSpan(0, 0, 4, 0, 0),
                            Price = 129,
                            Title = "Come as You Are",
                            TrackImageUrl = "https://i.discogs.com/gIQVfX1uZI857sBz7NntFRdTCLO3eQT0o4qCiCIHnfE/rs:fit/g:sm/q:90/h:486/w:543/czM6Ly9kaXNjb2dz/LWRhdGFiYXNlLWlt/YWdlcy9SLTc4MzIx/Ni0xNDE2ODkwNjQx/LTc3OTQuanBlZw.jpeg"
                        },
                        new
                        {
                            Id = new Guid("3c6d4a89-1558-40af-bfe2-e971524a142f"),
                            AlbumId = new Guid("a44a2b55-8237-4c54-ba0f-1656536630f8"),
                            ArtistId = new Guid("3ce30c3d-c447-4a1e-ae4d-6a084c558caf"),
                            Duration = new TimeSpan(0, 0, 5, 0, 0),
                            Price = 129,
                            Title = "Lithium",
                            TrackImageUrl = "https://i.discogs.com/hjHzpqaFqgJXi12l082Z4iIDAqkooFWzQOss9XzW6LU/rs:fit/g:sm/q:90/h:600/w:590/czM6Ly9kaXNjb2dz/LWRhdGFiYXNlLWlt/YWdlcy9SLTEyOTg2/OTQtMTU4NDk2NTg5/OS03MTUyLmpwZWc.jpeg"
                        },
                        new
                        {
                            Id = new Guid("f75476c4-b411-4084-acd1-556a5e43a0a7"),
                            AlbumId = new Guid("4d9dc852-f291-4f9f-8a1f-0643e2416c3f"),
                            ArtistId = new Guid("3ce30c3d-c447-4a1e-ae4d-6a084c558caf"),
                            Duration = new TimeSpan(0, 0, 4, 0, 0),
                            Price = 129,
                            Title = "Serve the Servants",
                            TrackImageUrl = "https://i.discogs.com/mFtdd9bDwACrDsS9nQyxKcWlBY_WKlcIib_5iq0NspE/rs:fit/g:sm/q:90/h:522/w:600/czM6Ly9kaXNjb2dz/LWRhdGFiYXNlLWlt/YWdlcy9SLTEyMjc5/MzMwLTE1MzIwMzE2/OTMtOTE3OC5qcGVn.jpeg"
                        },
                        new
                        {
                            Id = new Guid("082edfaa-2af4-4c68-9a7b-19347616c617"),
                            AlbumId = new Guid("4d9dc852-f291-4f9f-8a1f-0643e2416c3f"),
                            ArtistId = new Guid("3ce30c3d-c447-4a1e-ae4d-6a084c558caf"),
                            Duration = new TimeSpan(0, 0, 5, 0, 0),
                            Price = 129,
                            Title = "Heart-Shaped Box",
                            TrackImageUrl = "https://i.discogs.com/jvt57zTP4f1brU4p_ABs9ylQ8K6B6a0El-CFqmHRyPU/rs:fit/g:sm/q:90/h:600/w:597/czM6Ly9kaXNjb2dz/LWRhdGFiYXNlLWlt/YWdlcy9SLTM5MzA2/NS0xMTgyNjg0ODgz/LmpwZWc.jpeg"
                        },
                        new
                        {
                            Id = new Guid("ad9ec9ed-a8e5-4eaa-a890-fa835b19bf07"),
                            AlbumId = new Guid("4d9dc852-f291-4f9f-8a1f-0643e2416c3f"),
                            ArtistId = new Guid("3ce30c3d-c447-4a1e-ae4d-6a084c558caf"),
                            Duration = new TimeSpan(0, 0, 3, 0, 0),
                            Price = 129,
                            Title = "Frances Farmer Will Have Her Revenge On Seattle",
                            TrackImageUrl = "https://i.discogs.com/FeGBBtykttDrTxPvdjPufzgY4HuxmQ_Yw-4F0ooQdCw/rs:fit/g:sm/q:90/h:600/w:600/czM6Ly9kaXNjb2dz/LWRhdGFiYXNlLWlt/YWdlcy9SLTE0MDE4/ODMyLTE1NjY3NjM4/MTctMzc3OS5qcGVn.jpeg"
                        },
                        new
                        {
                            Id = new Guid("4ce8fc19-cae6-4d7a-b51c-21d315eda9d5"),
                            AlbumId = new Guid("4d9dc852-f291-4f9f-8a1f-0643e2416c3f"),
                            ArtistId = new Guid("3ce30c3d-c447-4a1e-ae4d-6a084c558caf"),
                            Duration = new TimeSpan(0, 0, 4, 0, 0),
                            Price = 129,
                            Title = "Pennyroyal Tea",
                            TrackImageUrl = "https://i.discogs.com/7W0cV6lsC_kWMo0sbFf1pd73ROkSNo6cpWEUHGrgdas/rs:fit/g:sm/q:90/h:462/w:596/czM6Ly9kaXNjb2dz/LWRhdGFiYXNlLWlt/YWdlcy9SLTgyOTcz/My0xMTY1MTQ0MjEy/LmpwZWc.jpeg"
                        });
                });

            modelBuilder.Entity("MusicStore.Domain.Domain.UserPlaylist", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MusicStoreApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("MusicStoreApplicationUserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserPlaylists");
                });

            modelBuilder.Entity("MusicStore.Domain.Identity.MusicStoreApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<Guid?>("UserCartId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("UserCartId");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("TrackUserPlaylist", b =>
                {
                    b.Property<Guid>("PlaylistsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TracksId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PlaylistsId", "TracksId");

                    b.HasIndex("TracksId");

                    b.ToTable("TrackUserPlaylist");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MusicStore.Domain.Identity.MusicStoreApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MusicStore.Domain.Identity.MusicStoreApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MusicStore.Domain.Identity.MusicStoreApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MusicStore.Domain.Identity.MusicStoreApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MusicStore.Domain.Domain.Album", b =>
                {
                    b.HasOne("MusicStore.Domain.Domain.Artist", "Artist")
                        .WithMany("Albums")
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artist");
                });

            modelBuilder.Entity("MusicStore.Domain.Domain.BoughtItem", b =>
                {
                    b.HasOne("MusicStore.Domain.Domain.Order", "Order")
                        .WithMany("BoughtItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Order");
                });

            modelBuilder.Entity("MusicStore.Domain.Domain.Order", b =>
                {
                    b.HasOne("MusicStore.Domain.Identity.MusicStoreApplicationUser", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("MusicStore.Domain.Domain.ShoppingCart", b =>
                {
                    b.HasOne("MusicStore.Domain.Identity.MusicStoreApplicationUser", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("MusicStore.Domain.Domain.ShoppingCartItem", b =>
                {
                    b.HasOne("MusicStore.Domain.Identity.MusicStoreApplicationUser", null)
                        .WithMany("PurchasedTracks")
                        .HasForeignKey("MusicStoreApplicationUserId");

                    b.HasOne("MusicStore.Domain.Domain.ShoppingCart", "shoppingCart")
                        .WithMany("Items")
                        .HasForeignKey("ShoppingCartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("shoppingCart");
                });

            modelBuilder.Entity("MusicStore.Domain.Domain.Track", b =>
                {
                    b.HasOne("MusicStore.Domain.Domain.Album", "Album")
                        .WithMany("Tracks")
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MusicStore.Domain.Domain.Artist", "Artist")
                        .WithMany("Tracks")
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Album");

                    b.Navigation("Artist");
                });

            modelBuilder.Entity("MusicStore.Domain.Domain.UserPlaylist", b =>
                {
                    b.HasOne("MusicStore.Domain.Identity.MusicStoreApplicationUser", null)
                        .WithMany("MyPlaylists")
                        .HasForeignKey("MusicStoreApplicationUserId");

                    b.HasOne("MusicStore.Domain.Identity.MusicStoreApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("User");
                });

            modelBuilder.Entity("MusicStore.Domain.Identity.MusicStoreApplicationUser", b =>
                {
                    b.HasOne("MusicStore.Domain.Domain.ShoppingCart", "UserCart")
                        .WithMany()
                        .HasForeignKey("UserCartId");

                    b.Navigation("UserCart");
                });

            modelBuilder.Entity("TrackUserPlaylist", b =>
                {
                    b.HasOne("MusicStore.Domain.Domain.UserPlaylist", null)
                        .WithMany()
                        .HasForeignKey("PlaylistsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MusicStore.Domain.Domain.Track", null)
                        .WithMany()
                        .HasForeignKey("TracksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MusicStore.Domain.Domain.Album", b =>
                {
                    b.Navigation("Tracks");
                });

            modelBuilder.Entity("MusicStore.Domain.Domain.Artist", b =>
                {
                    b.Navigation("Albums");

                    b.Navigation("Tracks");
                });

            modelBuilder.Entity("MusicStore.Domain.Domain.Order", b =>
                {
                    b.Navigation("BoughtItems");
                });

            modelBuilder.Entity("MusicStore.Domain.Domain.ShoppingCart", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("MusicStore.Domain.Identity.MusicStoreApplicationUser", b =>
                {
                    b.Navigation("MyPlaylists");

                    b.Navigation("PurchasedTracks");
                });
#pragma warning restore 612, 618
        }
    }
}
